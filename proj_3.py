import pandas as pd
import ast
import sys
import time
import random
import concurrent.futures
from tqdm import tqdm
from google_patent_scraper import scraper_class
from deep_translator import GoogleTranslator
from concurrent.futures import ThreadPoolExecutor, as_completed
import urllib.error
import http.client
import json

def run_steps():
    with open("config.json", "r", encoding="utf-8") as file:
            config = json.load(file)
            max_workers_ = config.get("max_workers")
            # print(max_workers_)

    def safe_eval(x):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫"""
        try:
            return ast.literal_eval(x) if isinstance(x, str) and x.startswith("[") else []
        except (SyntaxError, ValueError):
            return []

    def get_patent_abstracts(patent_list, max_retries=5):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ç–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        """
        if not patent_list or not isinstance(patent_list, list):
            return {patent: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏" for patent in patent_list}

        scraper = scraper_class(return_abstract=True)

        for patent in patent_list:
            if patent:
                scraper.add_patents(patent)

        if not scraper.list_of_patents:
            return {patent: "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)" for patent in patent_list}

        for attempt in range(max_retries):
            try:
                scraper.scrape_all_patents()
                return {
                    patent: scraper.parsed_patents.get(patent, {}).get("abstract_text", "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    for patent in patent_list
                }
            except (urllib.error.HTTPError, urllib.error.URLError, http.client.IncompleteRead) as e:
                # print(f" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
                time.sleep(random.uniform(1, 3))  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            except Exception as e:
                # print(f" –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {e}")
                return {patent: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏" for patent in patent_list}

        return {patent: "–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫" for patent in patent_list}

    def process_patents_dataframe(df, column_name="patents", max_workers=max_workers_):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç get_patent_abstracts –∫ –∫–∞–∂–¥–æ–º—É —Å–ø–∏—Å–∫—É –ø–∞—Ç–µ–Ω—Ç–æ–≤ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        """
        def process_row(index_patents):
            index, patents = index_patents
            print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ {index + 1} –∏–∑ {len(df)}...")
            if not isinstance(patents, list) or not patents:
                return {}
            return get_patent_abstracts(patents)

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers_) as executor:
            try:
                results = list(tqdm(
                    executor.map(process_row, zip(df.index, df[column_name])),
                    total=len(df),
                    desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç–µ–Ω—Ç–æ–≤"
                ))
            except Exception as e:
                # print(f" –û—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–∞—Ç–µ–Ω—Ç–æ–≤: {e}")
                results = [{}] * len(df)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

        df["abstracts"] = results
        return df

    def translate_text(text):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not text or text == "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
                return text
            translated = GoogleTranslator(source="auto", target="en").translate(text)
            return translated if translated else text
        except Exception as e:
            # print(f" –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text

    def translate_abstracts(abstract_dict):
        """–ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with ThreadPoolExecutor(max_workers=max_workers_) as executor:
                future_to_key = {executor.submit(translate_text, text): key for key, text in abstract_dict.items()}
                translated_dict = {}
                for future in as_completed(future_to_key):
                    key = future_to_key[future]
                    translated_dict[key] = future.result()
            return translated_dict
        except Exception as e:
            # print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {e}")
            return abstract_dict


    # ////////////////////
    try:
        df = pd.read_csv("data/Patents.csv", sep=";", encoding="utf-8", on_bad_lines="skip")
        df["patents"] = df["patents"].apply(safe_eval)
        process_patents_dataframe(df)

        # output_file = "data/Abstract.csv"
        # df.to_csv(output_file, sep=";", encoding="utf-8", index=False)
        # print(f"\n‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '{output_file}'.")

        tqdm.pandas(desc="–ü–µ—Ä–µ–≤–æ–¥ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")
        df["abstracts"] = df["abstracts"].progress_apply(translate_abstracts)

        output_file = "data/Angl_Abstract.csv"
        df.to_csv(output_file, sep=";", encoding="utf-8", index=False)
        print(f"\n‚úî –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '{output_file}'.")

    except Exception as e:
        print(f"\n –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    # ////////////////////

if __name__ == '__main__':
    run_steps()